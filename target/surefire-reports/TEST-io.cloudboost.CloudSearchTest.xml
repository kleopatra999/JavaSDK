<?xml version="1.0" encoding="UTF-8" ?>
<testsuite tests="27" failures="3" name="io.cloudboost.CloudSearchTest" time="15.42" errors="0" skipped="0">
  <properties>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="sun.boot.library.path" value="C:\Program Files\jdk1.8.0_05\jre\bin"/>
    <property name="java.vm.version" value="25.5-b02"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="maven.multiModuleProjectDirectory" value="E:\Engineer\programming\projects\javaSDK\git_repo"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=";"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="Java HotSpot(TM) Client VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="user.script" value=""/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="E:\Engineer\programming\projects\javaSDK\git_repo"/>
    <property name="java.runtime.version" value="1.8.0_05-b13"/>
    <property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="C:\Program Files\jdk1.8.0_05\jre\lib\endorsed"/>
    <property name="os.arch" value="x86"/>
    <property name="java.io.tmpdir" value="C:\Users\new\AppData\Local\Temp\"/>
    <property name="line.separator" value="
"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="user.variant" value=""/>
    <property name="os.name" value="Windows 8.1"/>
    <property name="classworlds.conf" value="C:\Program Files (x86)\apache-maven-3.3.3\bin\..\bin\m2.conf"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\jdk1.8.0_05\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\ProgramData\Oracle\Java\javapath;C:\oraclexe\app\oracle\product\11.2.0\server\bin;;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\;C:\Program Files (x86)\GNU\GnuPG\pub;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;C:\Program Files (x86)\Skype\Phone\;C:\Program Files\nodejs\;C:\Program Files\MySQL\MySQL Server 5.6\bin;C:\Program Files (x86)\apache-ant-1.9.6\bin;C:\Program Files\jdk1.8.0_05\bin;E:\Engineer\eclipse\android-sdk-windows\tools;E:\Engineer\eclipse\android-sdk-windows\platform-tools;C:\Program Files\jdk1.8.0_05\bin;C:\Program Files\MongoDB\Server\3.0\bin;E:\Engineer\eclipse\eclipse;E:\Engineer\eclipse\myeclipse;C:\Program Files (x86)\apache-maven-3.3.3\bin;C:\Program Files (x86)\GNU\GnuPG;C:\Program Files\openssl-0.9.8k_X64\bin;C:\Program Files\nodejs;C:\Users\new\AppData\Roaming\npm;C:\Program Files\Wireshark;."/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="sun.management.compiler" value="HotSpot Client Compiler"/>
    <property name="os.version" value="6.3"/>
    <property name="user.home" value="C:\Users\new"/>
    <property name="user.timezone" value="Africa/Nairobi"/>
    <property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="user.name" value="new"/>
    <property name="java.class.path" value="C:\Program Files (x86)\apache-maven-3.3.3\bin\..\boot\plexus-classworlds-2.5.2.jar"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="32"/>
    <property name="java.home" value="C:\Program Files\jdk1.8.0_05\jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher test"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.windows.WToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_05"/>
    <property name="java.ext.dirs" value="C:\Program Files\jdk1.8.0_05\jre\lib\ext;C:\Windows\Sun\Java\lib\ext"/>
    <property name="sun.boot.class.path" value="C:\Program Files\jdk1.8.0_05\jre\lib\resources.jar;C:\Program Files\jdk1.8.0_05\jre\lib\rt.jar;C:\Program Files\jdk1.8.0_05\jre\lib\sunrsasign.jar;C:\Program Files\jdk1.8.0_05\jre\lib\jsse.jar;C:\Program Files\jdk1.8.0_05\jre\lib\jce.jar;C:\Program Files\jdk1.8.0_05\jre\lib\charsets.jar;C:\Program Files\jdk1.8.0_05\jre\lib\jfr.jar;C:\Program Files\jdk1.8.0_05\jre\classes"/>
    <property name="sun.stderr.encoding" value="cp437"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="maven.home" value="C:\Program Files (x86)\apache-maven-3.3.3\bin\.."/>
    <property name="file.separator" value="\"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.stdout.encoding" value="cp437"/>
    <property name="sun.desktop" value="windows"/>
    <property name="sun.cpu.isalist" value="pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86"/>
  </properties>
  <testcase classname="io.cloudboost.CloudSearchTest" name="saveLatitudeLongitudePassedAsString" time="0.322"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="saveLatitudeLongitudeWhenPassedAsNumType" time="0.359"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldRunPrecisionQuery" time="0.703"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="searchObjectForValue" time="0.346"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="limitNumberOfSearch" time="0.331"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldSkipElements" time="0.721"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="searchindexedObject" time="0.748"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="searchObjectWithPhrase" time="0.35"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="searchObjectWithWildCard" time="0.35"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldRunMinimumPercentPrecisionQuery" time="0.99"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldGiveRecordsWithinACertainRange" time="0.381"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldSortElementsInDescendingOrder" time="0.417">
    <failure message="{&quot;status&quot;:&quot;400&quot;,&quot;message&quot;:&quot;SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][0]: SearchParseException[[bengi123][0]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;must\&quot;:[{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}],\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:23.809Z\&quot;}}}],\&quot;must_not\&quot;:[]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;desc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][0]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][1]: SearchParseException[[bengi123][1]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;must\&quot;:[{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}],\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:23.809Z\&quot;}}}],\&quot;must_not\&quot;:[]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;desc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][1]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][2]: SearchParseException[[bengi123][2]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;must\&quot;:[{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}],\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:23.809Z\&quot;}}}],\&quot;must_not\&quot;:[]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;desc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][2]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][3]: SearchParseException[[bengi123][3]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;must\&quot;:[{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}],\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:23.809Z\&quot;}}}],\&quot;must_not\&quot;:[]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;desc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][3]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][4]: SearchParseException[[bengi123][4]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;must\&quot;:[{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}],\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:23.809Z\&quot;}}}],\&quot;must_not\&quot;:[]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;desc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][4]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }]&quot;}" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: {&quot;status&quot;:&quot;400&quot;,&quot;message&quot;:&quot;SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][0]: SearchParseException[[bengi123][0]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;must\&quot;:[{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}],\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:23.809Z\&quot;}}}],\&quot;must_not\&quot;:[]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;desc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][0]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][1]: SearchParseException[[bengi123][1]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;must\&quot;:[{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}],\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:23.809Z\&quot;}}}],\&quot;must_not\&quot;:[]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;desc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][1]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][2]: SearchParseException[[bengi123][2]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;must\&quot;:[{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}],\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:23.809Z\&quot;}}}],\&quot;must_not\&quot;:[]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;desc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][2]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][3]: SearchParseException[[bengi123][3]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;must\&quot;:[{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}],\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:23.809Z\&quot;}}}],\&quot;must_not\&quot;:[]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;desc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][3]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][4]: SearchParseException[[bengi123][4]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;must\&quot;:[{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}],\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:23.809Z\&quot;}}}],\&quot;must_not\&quot;:[]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;desc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][4]: query[ConstantScore(BooleanFilter(+cache(ACL.read.allow.user:all) cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:23.809Z TO *])))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }]&quot;}
	at junit.framework.Assert.fail(Assert.java:47)
	at io.cloudboost.CloudSearchTest$6.done(CloudSearchTest.java:170)
	at io.cloudboost.CloudSearch.search(CloudSearch.java:225)
	at io.cloudboost.CloudSearchTest.shouldSortElementsInDescendingOrder(CloudSearchTest.java:164)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)
</failure>
  </testcase>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldOrderByAsc" time="0.427">
    <failure message="{&quot;status&quot;:&quot;400&quot;,&quot;message&quot;:&quot;SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][0]: SearchParseException[[bengi123][0]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:24.268Z\&quot;}}}],\&quot;must_not\&quot;:[],\&quot;must\&quot;:[{\&quot;exists\&quot;:{\&quot;field\&quot;:\&quot;age\&quot;}},{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;asc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][0]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][1]: SearchParseException[[bengi123][1]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:24.268Z\&quot;}}}],\&quot;must_not\&quot;:[],\&quot;must\&quot;:[{\&quot;exists\&quot;:{\&quot;field\&quot;:\&quot;age\&quot;}},{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;asc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][1]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][2]: SearchParseException[[bengi123][2]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:24.268Z\&quot;}}}],\&quot;must_not\&quot;:[],\&quot;must\&quot;:[{\&quot;exists\&quot;:{\&quot;field\&quot;:\&quot;age\&quot;}},{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;asc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][2]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][3]: SearchParseException[[bengi123][3]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:24.268Z\&quot;}}}],\&quot;must_not\&quot;:[],\&quot;must\&quot;:[{\&quot;exists\&quot;:{\&quot;field\&quot;:\&quot;age\&quot;}},{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;asc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][3]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][4]: SearchParseException[[bengi123][4]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:24.268Z\&quot;}}}],\&quot;must_not\&quot;:[],\&quot;must\&quot;:[{\&quot;exists\&quot;:{\&quot;field\&quot;:\&quot;age\&quot;}},{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;asc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][4]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }]&quot;}" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: {&quot;status&quot;:&quot;400&quot;,&quot;message&quot;:&quot;SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][0]: SearchParseException[[bengi123][0]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:24.268Z\&quot;}}}],\&quot;must_not\&quot;:[],\&quot;must\&quot;:[{\&quot;exists\&quot;:{\&quot;field\&quot;:\&quot;age\&quot;}},{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;asc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][0]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][1]: SearchParseException[[bengi123][1]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:24.268Z\&quot;}}}],\&quot;must_not\&quot;:[],\&quot;must\&quot;:[{\&quot;exists\&quot;:{\&quot;field\&quot;:\&quot;age\&quot;}},{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;asc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][1]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][2]: SearchParseException[[bengi123][2]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:24.268Z\&quot;}}}],\&quot;must_not\&quot;:[],\&quot;must\&quot;:[{\&quot;exists\&quot;:{\&quot;field\&quot;:\&quot;age\&quot;}},{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;asc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][2]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][3]: SearchParseException[[bengi123][3]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:24.268Z\&quot;}}}],\&quot;must_not\&quot;:[],\&quot;must\&quot;:[{\&quot;exists\&quot;:{\&quot;field\&quot;:\&quot;age\&quot;}},{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;asc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][3]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }{[zOZ7GjZmQwm8pznmmnkFVQ][bengi123][4]: SearchParseException[[bengi123][4]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [Failed to parse source [{\&quot;query\&quot;:{\&quot;filtered\&quot;:{\&quot;filter\&quot;:{\&quot;bool\&quot;:{\&quot;should\&quot;:[{\&quot;missing\&quot;:{\&quot;field\&quot;:\&quot;expires\&quot;}},{\&quot;range\&quot;:{\&quot;expires\&quot;:{\&quot;gte\&quot;:\&quot;2016-03-01T15:51:24.268Z\&quot;}}}],\&quot;must_not\&quot;:[],\&quot;must\&quot;:[{\&quot;exists\&quot;:{\&quot;field\&quot;:\&quot;age\&quot;}},{\&quot;term\&quot;:{\&quot;ACL.read.allow.user\&quot;:\&quot;all\&quot;}}]}},\&quot;query\&quot;:{\&quot;match_all\&quot;:{}}}},\&quot;size\&quot;:10,\&quot;from\&quot;:0,\&quot;sort\&quot;:[{\&quot;age\&quot;:{\&quot;order\&quot;:\&quot;asc\&quot;}}]}]]]; nested: SearchParseException[[bengi123][4]: query[ConstantScore(BooleanFilter(cache(NotFilter(cache(BooleanFilter(_field_names:expires)))) cache(expires:[2016-03-01T15:51:24.268Z TO *]) +cache(BooleanFilter(_field_names:age)) +cache(ACL.read.allow.user:all)))],from[0],size[10]: Parse Failure [No mapping found for [age] in order to sort on]]; }]&quot;}
	at junit.framework.Assert.fail(Assert.java:47)
	at io.cloudboost.CloudSearchTest$4.done(CloudSearchTest.java:100)
	at io.cloudboost.CloudSearch.search(CloudSearch.java:225)
	at io.cloudboost.CloudSearchTest.shouldOrderByAsc(CloudSearchTest.java:94)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)
</failure>
  </testcase>
  <testcase classname="io.cloudboost.CloudSearchTest" name="indexData" time="1.226"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="indexObject" time="0.409"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="equalToShouldWorkOnCloudSearchOverCloudObject" time="0.518">
    <failure message="Cannot PUT /bengi123/table/blrzkawf" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: Cannot PUT /bengi123/table/blrzkawf
	at junit.framework.Assert.fail(Assert.java:47)
	at io.cloudboost.CloudSearchTest$27.done(CloudSearchTest.java:921)
	at io.cloudboost.CloudTable.save(CloudTable.java:371)
	at io.cloudboost.CloudSearchTest.equalToShouldWorkOnCloudSearchOverCloudObject(CloudSearchTest.java:915)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)
</failure>
  </testcase>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldGiveElementsWhereCertainColumnExists" time="0.382"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldGiveElementsWhereCertainColumnNotExists" time="0.388"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="getDataNearFunction" time="0.372"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldIncludeArelationOnSearch" time="0.979"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldRunMultiTableSearch" time="1.206"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="orShouldWorkBetweenTables" time="1.197"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="shouldArrangeInAscendingOrder" time="0.762"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="searchObjectWithMostColumn" time="0.406"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="searchObjectWithBestColumn" time="0.388"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="searchObjectWithStartsWith" time="0.362"/>
  <testcase classname="io.cloudboost.CloudSearchTest" name="searchObjectWithNotEqualTo" time="0.38"/>
</testsuite>